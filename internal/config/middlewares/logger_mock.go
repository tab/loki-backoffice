// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/middlewares/logger.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/middlewares/logger.go -destination=internal/config/middlewares/logger_mock.go -package=middlewares
//

// Package middlewares is a generated GoMock package.
package middlewares

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockLoggerMiddleware is a mock of LoggerMiddleware interface.
type MockLoggerMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMiddlewareMockRecorder
	isgomock struct{}
}

// MockLoggerMiddlewareMockRecorder is the mock recorder for MockLoggerMiddleware.
type MockLoggerMiddlewareMockRecorder struct {
	mock *MockLoggerMiddleware
}

// NewMockLoggerMiddleware creates a new mock instance.
func NewMockLoggerMiddleware(ctrl *gomock.Controller) *MockLoggerMiddleware {
	mock := &MockLoggerMiddleware{ctrl: ctrl}
	mock.recorder = &MockLoggerMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerMiddleware) EXPECT() *MockLoggerMiddlewareMockRecorder {
	return m.recorder
}

// Log mocks base method.
func (m *MockLoggerMiddleware) Log(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Log", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMiddlewareMockRecorder) Log(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLoggerMiddleware)(nil).Log), next)
}
