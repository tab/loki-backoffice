// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/middlewares/telemetry.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/middlewares/telemetry.go -destination=internal/config/middlewares/telemetry_mock.go -package=middlewares
//

// Package middlewares is a generated GoMock package.
package middlewares

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTelemetryMiddleware is a mock of TelemetryMiddleware interface.
type MockTelemetryMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockTelemetryMiddlewareMockRecorder
	isgomock struct{}
}

// MockTelemetryMiddlewareMockRecorder is the mock recorder for MockTelemetryMiddleware.
type MockTelemetryMiddlewareMockRecorder struct {
	mock *MockTelemetryMiddleware
}

// NewMockTelemetryMiddleware creates a new mock instance.
func NewMockTelemetryMiddleware(ctrl *gomock.Controller) *MockTelemetryMiddleware {
	mock := &MockTelemetryMiddleware{ctrl: ctrl}
	mock.recorder = &MockTelemetryMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTelemetryMiddleware) EXPECT() *MockTelemetryMiddlewareMockRecorder {
	return m.recorder
}

// Trace mocks base method.
func (m *MockTelemetryMiddleware) Trace(next http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace", next)
	ret0, _ := ret[0].(http.Handler)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockTelemetryMiddlewareMockRecorder) Trace(next any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTelemetryMiddleware)(nil).Trace), next)
}
