// Code generated by MockGen. DO NOT EDIT.
// Source: internal/config/middlewares/authorization.go
//
// Generated by this command:
//
//	mockgen -source=internal/config/middlewares/authorization.go -destination=internal/config/middlewares/authorization_mock.go -package=middlewares
//

// Package middlewares is a generated GoMock package.
package middlewares

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAuthorizationMiddleware is a mock of AuthorizationMiddleware interface.
type MockAuthorizationMiddleware struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorizationMiddlewareMockRecorder
	isgomock struct{}
}

// MockAuthorizationMiddlewareMockRecorder is the mock recorder for MockAuthorizationMiddleware.
type MockAuthorizationMiddlewareMockRecorder struct {
	mock *MockAuthorizationMiddleware
}

// NewMockAuthorizationMiddleware creates a new mock instance.
func NewMockAuthorizationMiddleware(ctrl *gomock.Controller) *MockAuthorizationMiddleware {
	mock := &MockAuthorizationMiddleware{ctrl: ctrl}
	mock.recorder = &MockAuthorizationMiddlewareMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorizationMiddleware) EXPECT() *MockAuthorizationMiddlewareMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockAuthorizationMiddleware) Check(permission string) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", permission)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockAuthorizationMiddlewareMockRecorder) Check(permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockAuthorizationMiddleware)(nil).Check), permission)
}
