// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/users.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/users.go -destination=internal/app/controllers/users_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockUsersController is a mock of UsersController interface.
type MockUsersController struct {
	ctrl     *gomock.Controller
	recorder *MockUsersControllerMockRecorder
	isgomock struct{}
}

// MockUsersControllerMockRecorder is the mock recorder for MockUsersController.
type MockUsersControllerMockRecorder struct {
	mock *MockUsersController
}

// NewMockUsersController creates a new mock instance.
func NewMockUsersController(ctrl *gomock.Controller) *MockUsersController {
	mock := &MockUsersController{ctrl: ctrl}
	mock.recorder = &MockUsersControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsersController) EXPECT() *MockUsersControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockUsersController) Create(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", w, r)
}

// Create indicates an expected call of Create.
func (mr *MockUsersControllerMockRecorder) Create(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUsersController)(nil).Create), w, r)
}

// Delete mocks base method.
func (m *MockUsersController) Delete(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", w, r)
}

// Delete indicates an expected call of Delete.
func (mr *MockUsersControllerMockRecorder) Delete(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUsersController)(nil).Delete), w, r)
}

// Get mocks base method.
func (m *MockUsersController) Get(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", w, r)
}

// Get indicates an expected call of Get.
func (mr *MockUsersControllerMockRecorder) Get(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockUsersController)(nil).Get), w, r)
}

// List mocks base method.
func (m *MockUsersController) List(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "List", w, r)
}

// List indicates an expected call of List.
func (mr *MockUsersControllerMockRecorder) List(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockUsersController)(nil).List), w, r)
}

// Update mocks base method.
func (m *MockUsersController) Update(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", w, r)
}

// Update indicates an expected call of Update.
func (mr *MockUsersControllerMockRecorder) Update(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUsersController)(nil).Update), w, r)
}
