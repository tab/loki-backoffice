// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/controllers/permissions.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/controllers/permissions.go -destination=internal/app/controllers/permissions_mock.go -package=controllers
//

// Package controllers is a generated GoMock package.
package controllers

import (
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPermissionsController is a mock of PermissionsController interface.
type MockPermissionsController struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionsControllerMockRecorder
	isgomock struct{}
}

// MockPermissionsControllerMockRecorder is the mock recorder for MockPermissionsController.
type MockPermissionsControllerMockRecorder struct {
	mock *MockPermissionsController
}

// NewMockPermissionsController creates a new mock instance.
func NewMockPermissionsController(ctrl *gomock.Controller) *MockPermissionsController {
	mock := &MockPermissionsController{ctrl: ctrl}
	mock.recorder = &MockPermissionsControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionsController) EXPECT() *MockPermissionsControllerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionsController) Create(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Create", w, r)
}

// Create indicates an expected call of Create.
func (mr *MockPermissionsControllerMockRecorder) Create(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionsController)(nil).Create), w, r)
}

// Delete mocks base method.
func (m *MockPermissionsController) Delete(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", w, r)
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionsControllerMockRecorder) Delete(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionsController)(nil).Delete), w, r)
}

// Get mocks base method.
func (m *MockPermissionsController) Get(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", w, r)
}

// Get indicates an expected call of Get.
func (mr *MockPermissionsControllerMockRecorder) Get(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionsController)(nil).Get), w, r)
}

// List mocks base method.
func (m *MockPermissionsController) List(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "List", w, r)
}

// List indicates an expected call of List.
func (mr *MockPermissionsControllerMockRecorder) List(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionsController)(nil).List), w, r)
}

// Update mocks base method.
func (m *MockPermissionsController) Update(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Update", w, r)
}

// Update indicates an expected call of Update.
func (mr *MockPermissionsControllerMockRecorder) Update(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPermissionsController)(nil).Update), w, r)
}
