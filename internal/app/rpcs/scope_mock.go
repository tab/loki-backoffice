// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/rpcs/proto/sso/v1/scope_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/rpcs/proto/sso/v1/scope_grpc.pb.go -destination=internal/app/rpcs/scope_mock.go -package=rpcs
//

// Package rpcs is a generated GoMock package.
package rpcs

import (
	context "context"
	ssov1 "loki-backoffice/internal/app/rpcs/proto/sso/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockScopeServiceClient is a mock of ScopeServiceClient interface.
type MockScopeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockScopeServiceClientMockRecorder
	isgomock struct{}
}

// MockScopeServiceClientMockRecorder is the mock recorder for MockScopeServiceClient.
type MockScopeServiceClientMockRecorder struct {
	mock *MockScopeServiceClient
}

// NewMockScopeServiceClient creates a new mock instance.
func NewMockScopeServiceClient(ctrl *gomock.Controller) *MockScopeServiceClient {
	mock := &MockScopeServiceClient{ctrl: ctrl}
	mock.recorder = &MockScopeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeServiceClient) EXPECT() *MockScopeServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScopeServiceClient) Create(ctx context.Context, in *ssov1.CreateScopeRequest, opts ...grpc.CallOption) (*ssov1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*ssov1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockScopeServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScopeServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockScopeServiceClient) Delete(ctx context.Context, in *ssov1.DeleteScopeRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockScopeServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScopeServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockScopeServiceClient) Get(ctx context.Context, in *ssov1.GetScopeRequest, opts ...grpc.CallOption) (*ssov1.GetScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*ssov1.GetScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScopeServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScopeServiceClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockScopeServiceClient) List(ctx context.Context, in *ssov1.PaginatedListRequest, opts ...grpc.CallOption) (*ssov1.ListScopesResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ssov1.ListScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockScopeServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScopeServiceClient)(nil).List), varargs...)
}

// Update mocks base method.
func (m *MockScopeServiceClient) Update(ctx context.Context, in *ssov1.UpdateScopeRequest, opts ...grpc.CallOption) (*ssov1.UpdateScopeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*ssov1.UpdateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockScopeServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScopeServiceClient)(nil).Update), varargs...)
}

// MockScopeServiceServer is a mock of ScopeServiceServer interface.
type MockScopeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockScopeServiceServerMockRecorder
	isgomock struct{}
}

// MockScopeServiceServerMockRecorder is the mock recorder for MockScopeServiceServer.
type MockScopeServiceServerMockRecorder struct {
	mock *MockScopeServiceServer
}

// NewMockScopeServiceServer creates a new mock instance.
func NewMockScopeServiceServer(ctrl *gomock.Controller) *MockScopeServiceServer {
	mock := &MockScopeServiceServer{ctrl: ctrl}
	mock.recorder = &MockScopeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScopeServiceServer) EXPECT() *MockScopeServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockScopeServiceServer) Create(arg0 context.Context, arg1 *ssov1.CreateScopeRequest) (*ssov1.CreateScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*ssov1.CreateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockScopeServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockScopeServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockScopeServiceServer) Delete(arg0 context.Context, arg1 *ssov1.DeleteScopeRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockScopeServiceServerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockScopeServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockScopeServiceServer) Get(arg0 context.Context, arg1 *ssov1.GetScopeRequest) (*ssov1.GetScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*ssov1.GetScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockScopeServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockScopeServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockScopeServiceServer) List(arg0 context.Context, arg1 *ssov1.PaginatedListRequest) (*ssov1.ListScopesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*ssov1.ListScopesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockScopeServiceServerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockScopeServiceServer)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockScopeServiceServer) Update(arg0 context.Context, arg1 *ssov1.UpdateScopeRequest) (*ssov1.UpdateScopeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*ssov1.UpdateScopeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockScopeServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockScopeServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedScopeServiceServer mocks base method.
func (m *MockScopeServiceServer) mustEmbedUnimplementedScopeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedScopeServiceServer")
}

// mustEmbedUnimplementedScopeServiceServer indicates an expected call of mustEmbedUnimplementedScopeServiceServer.
func (mr *MockScopeServiceServerMockRecorder) mustEmbedUnimplementedScopeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedScopeServiceServer", reflect.TypeOf((*MockScopeServiceServer)(nil).mustEmbedUnimplementedScopeServiceServer))
}

// MockUnsafeScopeServiceServer is a mock of UnsafeScopeServiceServer interface.
type MockUnsafeScopeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeScopeServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeScopeServiceServerMockRecorder is the mock recorder for MockUnsafeScopeServiceServer.
type MockUnsafeScopeServiceServerMockRecorder struct {
	mock *MockUnsafeScopeServiceServer
}

// NewMockUnsafeScopeServiceServer creates a new mock instance.
func NewMockUnsafeScopeServiceServer(ctrl *gomock.Controller) *MockUnsafeScopeServiceServer {
	mock := &MockUnsafeScopeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeScopeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeScopeServiceServer) EXPECT() *MockUnsafeScopeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedScopeServiceServer mocks base method.
func (m *MockUnsafeScopeServiceServer) mustEmbedUnimplementedScopeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedScopeServiceServer")
}

// mustEmbedUnimplementedScopeServiceServer indicates an expected call of mustEmbedUnimplementedScopeServiceServer.
func (mr *MockUnsafeScopeServiceServerMockRecorder) mustEmbedUnimplementedScopeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedScopeServiceServer", reflect.TypeOf((*MockUnsafeScopeServiceServer)(nil).mustEmbedUnimplementedScopeServiceServer))
}
