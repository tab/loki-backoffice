// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/rpcs/interceptors/trace.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/rpcs/interceptors/trace.go -destination=internal/app/rpcs/interceptors/trace_mock.go -package=interceptors
//

// Package interceptors is a generated GoMock package.
package interceptors

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockTraceInterceptor is a mock of TraceInterceptor interface.
type MockTraceInterceptor struct {
	ctrl     *gomock.Controller
	recorder *MockTraceInterceptorMockRecorder
	isgomock struct{}
}

// MockTraceInterceptorMockRecorder is the mock recorder for MockTraceInterceptor.
type MockTraceInterceptorMockRecorder struct {
	mock *MockTraceInterceptor
}

// NewMockTraceInterceptor creates a new mock instance.
func NewMockTraceInterceptor(ctrl *gomock.Controller) *MockTraceInterceptor {
	mock := &MockTraceInterceptor{ctrl: ctrl}
	mock.recorder = &MockTraceInterceptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraceInterceptor) EXPECT() *MockTraceInterceptorMockRecorder {
	return m.recorder
}

// Trace mocks base method.
func (m *MockTraceInterceptor) Trace() grpc.UnaryClientInterceptor {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trace")
	ret0, _ := ret[0].(grpc.UnaryClientInterceptor)
	return ret0
}

// Trace indicates an expected call of Trace.
func (mr *MockTraceInterceptorMockRecorder) Trace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockTraceInterceptor)(nil).Trace))
}
