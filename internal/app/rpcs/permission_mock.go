// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/rpcs/proto/sso/v1/permission_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=internal/app/rpcs/proto/sso/v1/permission_grpc.pb.go -destination=internal/app/rpcs/permission_mock.go -package=rpcs
//

// Package rpcs is a generated GoMock package.
package rpcs

import (
	context "context"
	lokiv1 "loki-backoffice/internal/app/rpcs/proto/sso/v1"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// MockPermissionServiceClient is a mock of PermissionServiceClient interface.
type MockPermissionServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceClientMockRecorder
	isgomock struct{}
}

// MockPermissionServiceClientMockRecorder is the mock recorder for MockPermissionServiceClient.
type MockPermissionServiceClientMockRecorder struct {
	mock *MockPermissionServiceClient
}

// NewMockPermissionServiceClient creates a new mock instance.
func NewMockPermissionServiceClient(ctrl *gomock.Controller) *MockPermissionServiceClient {
	mock := &MockPermissionServiceClient{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionServiceClient) EXPECT() *MockPermissionServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionServiceClient) Create(ctx context.Context, in *lokiv1.CreatePermissionRequest, opts ...grpc.CallOption) (*lokiv1.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*lokiv1.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPermissionServiceClientMockRecorder) Create(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockPermissionServiceClient) Delete(ctx context.Context, in *lokiv1.DeletePermissionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionServiceClientMockRecorder) Delete(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockPermissionServiceClient) Get(ctx context.Context, in *lokiv1.GetPermissionRequest, opts ...grpc.CallOption) (*lokiv1.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*lokiv1.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPermissionServiceClientMockRecorder) Get(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionServiceClient)(nil).Get), varargs...)
}

// List mocks base method.
func (m *MockPermissionServiceClient) List(ctx context.Context, in *lokiv1.PaginatedListRequest, opts ...grpc.CallOption) (*lokiv1.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*lokiv1.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPermissionServiceClientMockRecorder) List(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionServiceClient)(nil).List), varargs...)
}

// Update mocks base method.
func (m *MockPermissionServiceClient) Update(ctx context.Context, in *lokiv1.UpdatePermissionRequest, opts ...grpc.CallOption) (*lokiv1.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*lokiv1.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPermissionServiceClientMockRecorder) Update(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPermissionServiceClient)(nil).Update), varargs...)
}

// MockPermissionServiceServer is a mock of PermissionServiceServer interface.
type MockPermissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionServiceServerMockRecorder
	isgomock struct{}
}

// MockPermissionServiceServerMockRecorder is the mock recorder for MockPermissionServiceServer.
type MockPermissionServiceServerMockRecorder struct {
	mock *MockPermissionServiceServer
}

// NewMockPermissionServiceServer creates a new mock instance.
func NewMockPermissionServiceServer(ctrl *gomock.Controller) *MockPermissionServiceServer {
	mock := &MockPermissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockPermissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionServiceServer) EXPECT() *MockPermissionServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPermissionServiceServer) Create(arg0 context.Context, arg1 *lokiv1.CreatePermissionRequest) (*lokiv1.CreatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*lokiv1.CreatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPermissionServiceServerMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPermissionServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPermissionServiceServer) Delete(arg0 context.Context, arg1 *lokiv1.DeletePermissionRequest) (*emptypb.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*emptypb.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPermissionServiceServerMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPermissionServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPermissionServiceServer) Get(arg0 context.Context, arg1 *lokiv1.GetPermissionRequest) (*lokiv1.GetPermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*lokiv1.GetPermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPermissionServiceServerMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPermissionServiceServer)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockPermissionServiceServer) List(arg0 context.Context, arg1 *lokiv1.PaginatedListRequest) (*lokiv1.ListPermissionsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*lokiv1.ListPermissionsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPermissionServiceServerMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPermissionServiceServer)(nil).List), arg0, arg1)
}

// Update mocks base method.
func (m *MockPermissionServiceServer) Update(arg0 context.Context, arg1 *lokiv1.UpdatePermissionRequest) (*lokiv1.UpdatePermissionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*lokiv1.UpdatePermissionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPermissionServiceServerMockRecorder) Update(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPermissionServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedPermissionServiceServer mocks base method.
func (m *MockPermissionServiceServer) mustEmbedUnimplementedPermissionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPermissionServiceServer")
}

// mustEmbedUnimplementedPermissionServiceServer indicates an expected call of mustEmbedUnimplementedPermissionServiceServer.
func (mr *MockPermissionServiceServerMockRecorder) mustEmbedUnimplementedPermissionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPermissionServiceServer", reflect.TypeOf((*MockPermissionServiceServer)(nil).mustEmbedUnimplementedPermissionServiceServer))
}

// MockUnsafePermissionServiceServer is a mock of UnsafePermissionServiceServer interface.
type MockUnsafePermissionServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePermissionServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafePermissionServiceServerMockRecorder is the mock recorder for MockUnsafePermissionServiceServer.
type MockUnsafePermissionServiceServerMockRecorder struct {
	mock *MockUnsafePermissionServiceServer
}

// NewMockUnsafePermissionServiceServer creates a new mock instance.
func NewMockUnsafePermissionServiceServer(ctrl *gomock.Controller) *MockUnsafePermissionServiceServer {
	mock := &MockUnsafePermissionServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePermissionServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePermissionServiceServer) EXPECT() *MockUnsafePermissionServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPermissionServiceServer mocks base method.
func (m *MockUnsafePermissionServiceServer) mustEmbedUnimplementedPermissionServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPermissionServiceServer")
}

// mustEmbedUnimplementedPermissionServiceServer indicates an expected call of mustEmbedUnimplementedPermissionServiceServer.
func (mr *MockUnsafePermissionServiceServerMockRecorder) mustEmbedUnimplementedPermissionServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPermissionServiceServer", reflect.TypeOf((*MockUnsafePermissionServiceServer)(nil).mustEmbedUnimplementedPermissionServiceServer))
}
