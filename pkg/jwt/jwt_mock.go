// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwt/jwt.go
//
// Generated by this command:
//
//	mockgen -source=pkg/jwt/jwt.go -destination=pkg/jwt/jwt_mock.go -package=jwt
//

// Package jwt is a generated GoMock package.
package jwt

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJwt is a mock of Jwt interface.
type MockJwt struct {
	ctrl     *gomock.Controller
	recorder *MockJwtMockRecorder
	isgomock struct{}
}

// MockJwtMockRecorder is the mock recorder for MockJwt.
type MockJwtMockRecorder struct {
	mock *MockJwt
}

// NewMockJwt creates a new mock instance.
func NewMockJwt(ctrl *gomock.Controller) *MockJwt {
	mock := &MockJwt{ctrl: ctrl}
	mock.recorder = &MockJwtMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJwt) EXPECT() *MockJwtMockRecorder {
	return m.recorder
}

// Decode mocks base method.
func (m *MockJwt) Decode(token string) (*Payload, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decode", token)
	ret0, _ := ret[0].(*Payload)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decode indicates an expected call of Decode.
func (mr *MockJwtMockRecorder) Decode(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decode", reflect.TypeOf((*MockJwt)(nil).Decode), token)
}
